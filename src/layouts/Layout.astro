---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	:root {
		--color-primary: #E8A603;
		--color-secondary: #F75B20;
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}

	body {
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>

<script>
	// @ts-ignore
	if (document.startViewTransition) {
		// @ts-ignore
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)
	
			// Queremos interceptar sólo las navegaciones en el mismo origen
			// Si es página externa, no hacemos nada
			if (location.origin !== toUrl.origin) return
	
			event.intercept({
				async handler () {
					// Cargamos la página de destino con un fetch para obtener el HTML
					const response = await fetch(toUrl.pathname) 
					const text = await response.text()
					// Nos queremos quedar solo con lo que hay dentro del body
					// Usamos un regex para extraerlo
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
	
					// Utilizamos la api de View Transition API
					// @ts-ignore
					document.startViewTransition(() => {
						// el scroll hacia arriba del todo
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		})
	}
</script>
